// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Wish {
    id            Int       @default(autoincrement()) @id
    description   String
    author        User      @relation(fields: [authorId], references: [id])
    authorId      Int
    challenges    Challenge[]
    createdAt     DateTime  @default(now())
}

model Goal {
    id            Int       @default(autoincrement()) @id
    description   String
    resolved      Boolean   @default(false)
    author        User      @relation(fields: [authorId], references: [id])
    authorId      Int
    challenges    Challenge[]
    createdAt     DateTime  @default(now())
}

model Challenge {
    id            Int       @default(autoincrement()) @id
    title         String
    description   String?
    goals         Goal[]
    wish          Wish?     @relation(fields: [wishId], references: [id])
    wishId        Int
    author        User      @relation("ChallengeAuthor", fields: [authorId], references: [id])
    authorId      Int
    assignee      User?     @relation("ChallengeAssignee", fields: [assigneeId], references: [id])
    assigneeId    Int?
    createdAt     DateTime  @default(now())
    startsAt      DateTime
    finishAt      DateTime
}

model User {
    id                  Int         @default(autoincrement()) @id
    name                String?
    email               String     @unique
    emailVerified       DateTime?   @map(name: "email_verified")
    passwordHash        String
    image               String?
    createdAt           DateTime    @default(now()) @map(name: "created_at")
    updatedAt           DateTime    @updatedAt @map(name: "updated_at")
    wishes              Wish[]
    goals               Goal[]
    challenges          Challenge[] @relation("ChallengeAuthor")
    assignedChalleges   Challenge[] @relation("ChallengeAssignee")
    @@map(name: "users")
}

model Account {
    id                 Int       @default(autoincrement()) @id
    compoundId         String    @unique @map(name: "compound_id")
    userId             Int       @map(name: "user_id")
    providerType       String    @map(name: "provider_type")
    providerId         String    @map(name: "provider_id")
    providerAccountId  String    @map(name: "provider_account_id")
    refreshToken       String?   @map(name: "refresh_token")
    accessToken        String?   @map(name: "access_token")
    accessTokenExpires DateTime? @map(name: "access_token_expires")
    createdAt          DateTime  @default(now()) @map(name: "created_at")
    updatedAt          DateTime  @default(now()) @map(name: "updated_at")

    @@index([providerAccountId], name: "providerAccountId")
    @@index([providerId], name: "providerId")
    @@index([userId], name: "userId")

    @@map(name: "accounts")
}

model Session {
    id           Int      @default(autoincrement()) @id
    userId       Int      @map(name: "user_id")
    expires      DateTime
    sessionToken String   @unique @map(name: "session_token")
    accessToken  String   @unique @map(name: "access_token")
    createdAt    DateTime @default(now()) @map(name: "created_at")
    updatedAt    DateTime @default(now()) @map(name: "updated_at")

    @@map(name: "sessions")
}

model VerificationRequest {
    id           Int      @default(autoincrement()) @id
    identifier   String
    token        String   @unique
    expires      DateTime
    createdAt    DateTime @default(now()) @map(name: "created_at")
    updatedAt    DateTime @default(now()) @map(name: "updated_at")

    @@map(name: "verification_requests")
}