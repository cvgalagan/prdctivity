// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Wish {
    id            String        @default(cuid()) @id
    description   String
    author        User      @relation(fields: [authorId], references: [id])
    authorId      String
    challenges    Challenge[]
    createdAt     DateTime  @default(now())
}

model Goal {
    id            String        @default(cuid()) @id
    description   String
    resolved      Boolean   @default(false)
    author        User      @relation(fields: [authorId], references: [id])
    authorId      String
    challenges    Challenge[]
    createdAt     DateTime  @default(now())
}

model Challenge {
    id            String        @default(cuid()) @id
    title         String
    description   String?
    goals         Goal[]
    wish          Wish?     @relation(fields: [wishId], references: [id])
    wishId        String
    author        User      @relation("ChallengeAuthor", fields: [authorId], references: [id])
    authorId      String
    assignee      User?     @relation("ChallengeAssignee", fields: [assigneeId], references: [id])
    assigneeId    String?
    createdAt     DateTime  @default(now())
    startsAt      DateTime
    finishAt      DateTime
}

model Account {
    id                 String    @id @default(cuid())
    userId             String
    providerType       String
    providerId         String
    providerAccountId  String
    refreshToken       String?
    accessToken        String?
    accessTokenExpires DateTime?
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    user               User      @relation(fields: [userId], references: [id])

    @@unique([providerId, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    userId       String
    expires      DateTime
    sessionToken String   @unique
    accessToken  String   @unique
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User     @relation(fields: [userId], references: [id])
}

model User {
    id                  String         @default(cuid()) @id
    name                String?
    email               String     @unique
    emailVerified       DateTime?
    passwordHash        String?
    image               String?
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt
    wishes              Wish[]
    goals               Goal[]
    challenges          Challenge[] @relation("ChallengeAuthor")
    assignedChalleges   Challenge[] @relation("ChallengeAssignee")
    accounts            Account[]
    sessions            Session[]
}

model VerificationRequest {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
}